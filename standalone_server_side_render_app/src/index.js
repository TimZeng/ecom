import 'babel-polyfill';
import express from 'express';
import { matchRoutes } from 'react-router-config';
import proxy from 'express-http-proxy';
import Routes from './client/Routes';
import renderer from './helpers/renderer';
import createStore from './helpers/createStore';

const app = express();

// setup proxy
// send any request for /api to api server
app.use('/api', proxy('http://react-ssr-api.herokuapp.com', {
  // for handling google oauth flow
  proxyReqOptDecorator(opts) {
    opts.headers['x-forwarded-host'] = 'localhost:3000';
    return opts;
  }
}));

// serving the public folder for any file request
app.use(express.static('public'));

app.get('*', (req, res) => {
  const store = createStore( req );

  // Load data into the store before render application
  // use matchRoutes to find out what component to show
  // and more importantly what data to fetch and return an array of promises
  const promises = matchRoutes( Routes, req.path ).map(({ route }) => {
    return route.loadData ? route.loadData( store ) : null;
  })
  // wrap the promise generated by the loadData function call
  // with a new promise, so each promise will for sure be resolved
  // and Promise.all will for sure succeed
  .map(promise => {
    if ( promise ) {
      // this way the successful data fetching will be resolved properly
      // the unsuccessful data fetching will also be resolved
      // and proceed to the server side rendering
      return new Promise((resolve, reject) => {
        promise.then(resolve).catch(resolve);
      });
    }
  });

  // wait for all data requests to finish then render
  Promise.all( promises ).then(() => {
    // this context is used for react staticRouter
    // to pass it down to all components rendered by staticRouter
    const context = {};

    // generate the content to be sent to the brower
    const content = renderer( req, store, context );

    // when a <Redirect /> is rendered,
    // the url property will be set on the context object
    if ( context.url ) {
      // if url property exist, redirect the req to the url
      return res.redirect( 301, context.url );
    }

    // in notFoundPage we modify the context object
    // by setting the notFound property to true
    if ( context.notFound ) {
      // so if notFound is true, set status code to 404
      res.status( 404 );
    }

    // finally send the content with appropriate status code
    res.send( content );
  });

  /*
   * insert a catch statement for error handling
   * but this approach will stop the entire server side rendering
   *
   * even if we try to run renderer in the catch state
   * it is still not ideal because if any data fetching went wrong
   * all the success data fetching get ignored
   *
   * .catch(() => {
   *   res.send('Something went wrong');
   * });
   */
});

app.listen(3000, () => {
  console.log('Listening on port 3000');
});